<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="52cb80ce-2ed4-4e73-a420-0257b6d4e032" name="Default Changelist" comment="">
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__clj_time_0_15_2.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__joda_time_2_10.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__overtone_at_at_1_2_0.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/artek-users-tracker.iml" beforeDir="false" afterPath="$PROJECT_DIR$/artek-users-tracker.iml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/project.clj" beforeDir="false" afterPath="$PROJECT_DIR$/project.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/artek_users_tracker/core.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/artek_users_tracker/core.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/artek_users_tracker/helpers.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/artek_users_tracker/helpers.clj" afterDir="false" />
    </list>
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="ProjectId" id="1SCRdXGMrJOj8v74shLjYu9Ct18" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="PropertiesComponent">
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="settings.editor.selected.configurable" value="editor.preferences.fonts.default" />
  </component>
  <component name="ReplState" timestamp="1571921260641">{:repl-history {:ide [], :local [{:command &quot;(def login-time (-&gt;\n                  (slurp \&quot;login-time.txt\&quot;)\n                  (s/split-lines)\n                  (parse-users-time)\n                  ))&quot;, :offset 154, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(doc doall)&quot;, :offset 10, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(first raw-lines)&quot;, :offset 16, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(parse-users-time raw-lines)&quot;, :offset 27, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(users-login-time)&quot;, :offset 17, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(print (group-by :user users-login-time))&quot;, :offset 39, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(pprint (group-by :user users-login-time))&quot;, :offset 2, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(pprint parse-users-time)&quot;, :offset 24, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(pprint users-login-time)&quot;, :offset 24, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(pprint (set users-login-time))&quot;, :offset 29, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(count (set users-login-time))&quot;, :offset 28, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(first parsed-lines)&quot;, :offset 19, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(filter #(= nil (second %)) parsed-lines)&quot;, :offset 40, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def parsed-lines (map #(re-find #\&quot;user:\\s?(\\w+)\\s?computer:\\s?(\\w+)\\s?date:\\s?(\\d+\\.\\d+\\.\\d+)\\s?time:(\\d+:\\d+:\\d+,\\d+)\&quot; %) raw-lines))&quot;, :offset 135, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(count (filter #(= nil (second %)) parsed-lines))&quot;, :offset 7, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def regexp #\&quot;user:\\s?(\\w+)\\s?computer:\\s?(\\w+)\\s?date:\\s?(\\d+\\.\\d+\\.\\d+)\\s?time:\\ s?(\\d+:\\d+:\\d+,\\d+)\&quot;)&quot;, :offset 104, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def regexp #\&quot;user:\\s?(\\w+)\\s?computer:\\s?(\\w+)\\s?date:\\s?(\\d+\\.\\d+\\.\\d+)\\s?time:\\s?(\\d+:\\d+:\\d+,\\d+)\&quot;)&quot;, :offset 103, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def regexp #\&quot;user:\\s?(\\w+)\\s?computer:\\s?(\\w+)\\s?date:\\s?(\\d+\\.\\d+\\.\\d+)\\s?time:\\s?+(\\d+:\\d+:\\d+,\\d+)\&quot;)&quot;, :offset 104, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def regexp #\&quot;user:\\s?(\\w+)\\s?computer:\\s?(\\w+)\\s?date:\\s?(\\d+\\.\\d+\\.\\d+)\\s?time:[\\s?]+(\\d+:\\d+:\\d+,\\d+)\&quot;)&quot;, :offset 106, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def regexp #\&quot;user:[\\s?]+(\\S)[\\s?]+\&quot;)&quot;, :offset 37, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def string-to-parse  \&quot;user: AKochetigov computer: RSO-123456 date: 30.10.2018 time:  8:40:41,87\&quot;)&quot;, :offset 98, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def regexp #\&quot;user:\\s*(\\S+)\\s*computer:\\s*(\\S+)\\s*date:\\s*(\\S+)\\s*time:\\s*(\\S+)\&quot;)&quot;, :offset 81, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-find regexp string-to-parse)&quot;, :offset 32, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def p-lines\n  (doseq [line raw-lines]\n    (let [[_ user computer date time] (re-find #\&quot;user:\\s*(\\S+)\\s*computer:\\s*(\\S+)\\s*date:\\s*(\\S+)\\s*time:\\s*(\\S+)\&quot; line)]\n      (when (= user nil)\n        (pprint line)))))&quot;, :offset 212, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def users-to-users-time\n  (group-by :user users-login-time))&quot;, :offset 61, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(pprint (first users-to-users-time))&quot;, :offset 34, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(pprint (second users-to-users-time))&quot;, :offset 15, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(second (partition-by :name users-login-time))&quot;, :offset 44, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(first (partition-by :name users-login-time))&quot;, :offset 6, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(filter #(= nil (:name %)) users-login-time)&quot;, :offset 15, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def users-login-time (-&gt;\n                        (slurp \&quot;login-time.txt\&quot;)\n                        (s/split-lines)\n                        (parse-users-time)\n                        (set)\n                        (hash-map)\n                        ))&quot;, :offset 249, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def users-login-time (-&gt;\n                        (slurp \&quot;login-time.txt\&quot;)\n                        (s/split-lines)\n                        (parse-users-time)\n                        (fn [v] (filter #(not= nil (:user %)) v))\n                        ))&quot;, :offset 250, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(count users-login-time)&quot;, :offset 23, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(defn parse-users-time\n  [lines]\n  (let [parse-result (map #(re-find #\&quot;user:\\s*(\\S+)\\s*computer:\\s*(\\S+)\\s*date:\\s*(\\S+)\\s*time:\\s*(\\S+)\&quot; %) lines)]\n    (map (fn [[ss user computer date time]]\n           {:user user\n            :computer computer\n            :date date\n            :time time})\n         parse-result)))&quot;, :offset 319, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def users-login-time (-&gt;\n                        (slurp \&quot;login-time.txt\&quot;)\n                        (s/split-lines)\n                        (parse-users-time)\n                        ((fn [v] (filter #(not= nil (:user %)) v)))\n                        ))&quot;, :offset 252, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(filter #(= nil (:user %)) users-login-time)&quot;, :offset 22, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def f (first users-login-time))&quot;, :offset 30, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(s/split (:date f) \&quot;.\&quot;)&quot;, :offset 21, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(s/split (:date f) #\&quot;.\&quot;)&quot;, :offset 20, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(:date f)&quot;, :offset 8, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(s/split )&quot;, :offset 9} {:command &quot;(int \&quot;27\&quot;)&quot;, :offset 8, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(Integer. \&quot;23\&quot;)&quot;, :offset 13, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(map Integer. (s/split (:date f) #\&quot;\\.\&quot;))&quot;, :offset 14, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(map  Integer/parseInt (s/split (:date f) #\&quot;\\.\&quot;))&quot;, :offset 22, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(Integer/parseInt \&quot;23\&quot;)&quot;, :offset 21, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(map Integer/parseInt [\&quot;12\&quot; \&quot;33\&quot; \&quot;16\&quot;])&quot;, :offset 36, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(defn parse-int [s]\n  (Integer/parseInt (re-find #\&quot;\\A-?\\d+\&quot; s)))&quot;, :offset 64, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(s/split (:date f) #\&quot;\\.\&quot;)&quot;, :offset 1, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(map parse-int (s/split (:date f) #\&quot;\\.\&quot;))&quot;, :offset 15, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(apply t/date-time (map parse-int (s/split (:date f) #\&quot;\\.\&quot;)))&quot;, :offset 19, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(f)&quot;, :offset 2, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;f&quot;, :offset 1, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(s/split (:time f) #\&quot;:,\&quot;)&quot;, :offset 23, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(s/split (:time f) #\&quot;:\\,\&quot;)&quot;, :offset 23, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(s/split (:time f) #\&quot;:\&quot;)&quot;, :offset 22, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;()&quot;, :offset 1} {:command &quot;(s/split (:time f) #\&quot;,\&quot;)&quot;, :offset 22, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(s/split (first (s/split (:time f) #\&quot;,\&quot;)) #\&quot;:\&quot;)&quot;, :offset 43, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def d (t/date-time 2019 09 27 8 05 12))&quot;, :offset 38, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def d (t/date-time 2019 9 27 8 5 12))&quot;, :offset 32, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;d&quot;, :offset 1, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(str d)&quot;, :offset 6, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(apply t/date-time (conj (reverse (map parse-int (s/split (:date f)))) (s/split (first (s/split (:time f) #\&quot;,\&quot;)) #\&quot;:\&quot;)))&quot;, :offset 118, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(apply t/date-time (conj (reverse (map parse-int (s/split (:date f) #\&quot;\\.\&quot;))) (s/split (first (s/split (:time f) #\&quot;,\&quot;)) #\&quot;:\&quot;)))&quot;, :offset 72, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(apply t/date-time (conj (reverse (map parse-int (s/split (:date f) #\&quot;\\.\&quot;))) (map parse-int (s/split (first (s/split (:time f) #\&quot;,\&quot;)) #\&quot;:\&quot;))))&quot;, :offset 92, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(defn parse-date\n  [date]\n  (into [] (-&gt;\n             date\n             (s/split #\&quot;\\.\&quot;)\n             #(map parse-int %)\n             (reverse))))&quot;, :offset 145, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(defn parse-date\n  [date]\n  (into [] (-&gt;\n             date\n             (s/split #\&quot;\\.\&quot;)\n             (#(map parse-int %))\n             (reverse))))&quot;, :offset 147, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(parse-date (:date f))&quot;, :offset 20, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(defn parse-time\n  [time]\n  (into [] (-&gt;\n             time\n             (s/split #\&quot;,\&quot;)\n             (first)\n             (s/split #\&quot;:\&quot;)\n             (#(map parse-int %))))\n  )&quot;, :offset 175, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(parse-time (:time f))&quot;, :offset 20, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(conj (parse-data (:data f)) (parse-time (:time f)))&quot;, :offset 26, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(conj (parse-date (:data f)) (parse-time (:time f)))&quot;, :offset 17, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(conj (parse-date (:date f)) (parse-time (:time f)))&quot;, :offset 24, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(into [] (parse-date (:date f)) (parse-time (:time f)))&quot;, :offset 8, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;( (parse-date (:date f)) (parse-time (:time f)))&quot;, :offset 1, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(flatten (parse-date (:date f)) (parse-time (:time f)))&quot;, :offset 9, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(parse-date (:date f)) (parse-time (:time f))&quot;, :offset 45, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(concat (parse-date (:date f)) (parse-time (:time f)))&quot;, :offset 7, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(apply t/date-time (concat (parse-date (:date f)) (parse-time (:time f))))&quot;, :offset 19, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(first users-login-time)&quot;, :offset 23, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(users-to-users-time \&quot;MIvanov\&quot;)&quot;, :offset 29, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def info2 (slurp \&quot;//artek6/1cbaze/Test/info2.txt\&quot;))&quot;, :offset 52, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def info2 (slurp \&quot;smb://artek6/1cbaze/Test/info2.txt\&quot;))&quot;, :offset 56, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def info2 (slurp \&quot;smb://artek6.corp.artek.org/1cbaze/Test/info2.txt\&quot;))&quot;, :offset 71, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def info2 (slurp \&quot;smb://artek6.corp.artek.org/1cbase/Test/info2.txt\&quot;))&quot;, :offset 71, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def info2 (slurp \&quot;/run/user/1000/gvfs/smb-share:server=artek6.corp.artek.org,share=1cbase/Test/info2.txt\&quot;))&quot;, :offset 108, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;info2&quot;, :offset 5, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def users-login-time (-&gt;\n                        (slurp \&quot;/run/user/1000/gvfs/smb-share:server=artek6.corp.artek.org,share=1cbase/Test/info2.txt\&quot;)\n                        (s/split-lines)\n                        (parse-users-time)\n                        ((fn [v] (filter #(not= nil (:user %)) v))) ;drop all non-parsed results\n                        ))&quot;, :offset 353, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(last users-login-time)&quot;, :offset 22, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(cs/difference (set users-login) (set (get-users \&quot;/run/user/1000/gvfs/smb-share:server=artek6.corp.artek.org,share=1cbase/Test/info2.txt\&quot;)))&quot;, :offset 138, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(last users-logout)&quot;, :offset 18, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(cs/difference (set users-logout) (set (get-users \&quot;infoExit\&quot;)))&quot;, :offset 63, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(cs/difference (set users-logout) (set (get-users \&quot;infoExit.txt\&quot;)))&quot;, :offset 67, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(cs/difference (set (get-users \&quot;infoExit.txt\&quot;)) (set users-logout))&quot;, :offset 66, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(users-login)&quot;, :offset 12, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(last users-login)&quot;, :offset 17, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(last @users-login)&quot;, :offset 7, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(update-users 3)&quot;, :offset 15, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(update-users 3000)&quot;, :offset 18, :ns &quot;artek-users-tracker.core&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager">
    <configuration name="REPL for artek-users-tracker" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="artek-users-tracker" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for artek-users-tracker" />
      </list>
    </recent_temporary>
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State>
              <option name="COLUMN_ORDER" />
            </State>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>