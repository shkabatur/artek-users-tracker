<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="52cb80ce-2ed4-4e73-a420-0257b6d4e032" name="Default Changelist" comment="" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ProjectId" id="1SCRdXGMrJOj8v74shLjYu9Ct18" />
  <component name="PropertiesComponent">
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="settings.editor.selected.configurable" value="editor.preferences.fonts.default" />
  </component>
  <component name="ReplState" timestamp="1571073868499">{:repl-history {:ide [], :local [{:command &quot;(+ 2 2)&quot;, :offset 6, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(first (s/split-lines login-time))&quot;, :offset 7, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(len login-time)&quot;, :offset 15, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def login-time (s/split-lines (slurp \&quot;login-time.txt\&quot;)))&quot;, :offset 57, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-matches (#\&quot;user:\\S+(\\w+)S+\&quot;) (first login-time))&quot;, :offset 52, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-matches #\&quot;(\\w+)\&quot; (first login-time))&quot;, :offset 38, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-matches #\&quot;\\S+(\\w+)\\S+\&quot; (first login-time))&quot;, :offset 25, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-matches #\&quot;user:\&quot; (first login-time))&quot;, :offset 19, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-matches #\&quot;d+\&quot; (first login-time))&quot;, :offset 16, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def s (first login-time))&quot;, :offset 24, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(type s)&quot;, :offset 7, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-matches #\&quot;(\\d+)\&quot; s)&quot;, :offset 22, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-matches #\&quot;user\&quot; s)&quot;, :offset 18, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-matches #\&quot;*\&quot; s)&quot;, :offset 15, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-matches #\&quot;.*\&quot; s)&quot;, :offset 15, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-matches #\&quot;date:\&quot; s)&quot;, :offset 19, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-matches #\&quot;.*(\\d+).*\&quot; s)&quot;, :offset 23, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-matches #\&quot;*(\\d+)*\&quot; s)&quot;, :offset 14, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-matches #\&quot;.(\\d+).\&quot; s)&quot;, :offset 21, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-find \&quot;(\\d+)\&quot; s)&quot;, :offset 18, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-find #\&quot;(\\d+)\&quot; s)&quot;, :offset 10, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;s&quot;, :offset 1, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-find #\&quot;(\\d+\\.\\d+\\.\\d+)\&quot; s)&quot;, :offset 25, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-find #\&quot;user:\\S(\\w+)(\\d+\\.\\d+\\.\\d+)\&quot; s)&quot;, :offset 23, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-find #\&quot;user:\\S(\\w+).*(\\d+\\.\\d+\\.\\d+)\&quot; s)&quot;, :offset 25, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-find #\&quot;user:\\S(\\w+).(\\d+\\.\\d+\\.\\d+)\&quot; s)&quot;, :offset 24, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-find #\&quot;user:\\S(\\w+) (\\d+\\.\\d+\\.\\d+)\&quot; s)&quot;, :offset 24, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-find #\&quot;user:\\S(\\w+)\&quot; s)&quot;, :offset 23, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-find #\&quot;user: (\\w+)\&quot; s)&quot;, :offset 17, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-find #\&quot;user: (\\w+) computer: (\\w+) date: (\\d+\\.\\d+\\.\\d+\\.)\&quot; s)&quot;, :offset 62, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-find #\&quot;user: (\\w+) computer: (\\w+) date: (\\d+\\.\\d+\\.\\d+)\&quot; s)&quot;, :offset 59, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-find #\&quot;user: (\\w+) computer: (\\w+) date: (\\d+\\.\\d+\\.\\d+) time:\\S?(\\d+:\\d+:\\d+)\&quot; s)&quot;, :offset 82, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-find #\&quot;user: (\\w+) computer: (\\w+) date: (\\d+\\.\\d+\\.\\d+) time:?(\\d+:\\d+:\\d+)\&quot; s)&quot;, :offset 66, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-find #\&quot;user: (\\w+) computer: (\\w+) date: (\\d+\\.\\d+\\.\\d+) time: (\\d+:\\d+:\\d+)\&quot; s)&quot;, :offset 67, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-find #\&quot;user: (\\w+) computer: (\\w+) date: (\\d+\\.\\d+\\.\\d+) time:\\s?(\\d+:\\d+:\\d+)\&quot; s)&quot;, :offset 69, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-find #\&quot;user: (\\w+) computer:\\s?(\\w+) date: (\\d+\\.\\d+\\.\\d+) time:\\s?(\\d+:\\d+:\\d+)\&quot; s)&quot;, :offset 35, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-find #\&quot;user:\\s?(\\w+)\\s?computer:\\s?(\\w+)\\s?date:\\s?(\\d+\\.\\d+\\.\\d+)\\s?time:\\s?(\\d+:\\d+:\\d+)\&quot; s)&quot;, :offset 73, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-find #\&quot;user:\\s?(\\w+)\\s?computer:\\s?(\\w+)\\s?date:\\s?(\\d+\\.\\d+\\.\\d+)\\s?time:\\s?(\\d+:\\d+:\\d+,\\d+)\&quot; s)&quot;, :offset 97, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def parse-users-time\n  [lines]\n  (map #(re-find #\&quot;user:\\s?(\\w+)\\s?computer:\\s?(\\w+)\\s?date:\\s?(\\d+\\.\\d+\\.\\d+)\\s?time:\\s?(\\d+:\\d+:\\d+,\\d+)\&quot; %)\n       lines))&quot;, :offset 157, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(defn parse-users-time\n  [lines]\n  (map #(re-find #\&quot;user:\\s?(\\w+)\\s?computer:\\s?(\\w+)\\s?date:\\s?(\\d+\\.\\d+\\.\\d+)\\s?time:\\s?(\\d+:\\d+:\\d+,\\d+)\&quot; %)\n       lines))&quot;, :offset 158, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def t (parse-users-time login-time))&quot;, :offset 35, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(count t)&quot;, :offset 8, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(count login-time)&quot;, :offset 17, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(nth t 33432)&quot;, :offset 12, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(let [ [_ user computer date time] (first login-time)]\n  (println \&quot;:user \&quot; user\n           \&quot;:computer \&quot; computer\n           \&quot;:date \&quot; date\n           \&quot;:time \&quot; time))&quot;, :offset 162, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(defn parse-users-time\n  [lines]\n  (let [parse-result (map #(re-find #\&quot;user:\\s?(\\w+)\\s?computer:\\s?(\\w+)\\s?date:\\s?(\\d+\\.\\d+\\.\\d+)\\s?time:\\s?(\\d+:\\d+:\\d+,\\d+)\&quot; %) lines)]\n    (map (fn [[_ user computer date time] %]\n           {:user user\n            :computer computer\n            :date date\n            :time time}))\n    ))&quot;, :offset 325, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(type login-time)&quot;, :offset 16, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(first login-time)&quot;, :offset 17, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(defn parse-users-time\n  [lines]\n  (let [parse-result (map #(re-find #\&quot;user:\\s?(\\w+)\\s?computer:\\s?(\\w+)\\s?date:\\s?(\\d+\\.\\d+\\.\\d+)\\s?time:\\s?(\\d+:\\d+:\\d+,\\d+)\&quot; %) lines)]\n    (doall (map (fn [[_ user computer date time] %]\n           {:user user\n            :computer computer\n            :date date\n            :time time}) parse-result))))&quot;, :offset 341, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def login-time (-&gt;\n                  (slurp \&quot;login-time.txt\&quot;)\n                  (s/split-lines)\n                  (parse-users-time)\n                  ))&quot;, :offset 154, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(doc doall)&quot;, :offset 10, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(first raw-lines)&quot;, :offset 16, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(parse-users-time raw-lines)&quot;, :offset 27, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(users-login-time)&quot;, :offset 17, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(print (group-by :user users-login-time))&quot;, :offset 39, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(pprint (group-by :user users-login-time))&quot;, :offset 2, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(pprint parse-users-time)&quot;, :offset 24, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(pprint users-login-time)&quot;, :offset 24, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(pprint (set users-login-time))&quot;, :offset 29, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(count users-login-time)&quot;, :offset 23, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(count (set users-login-time))&quot;, :offset 28, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(first parsed-lines)&quot;, :offset 19, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(filter #(= nil (second %)) parsed-lines)&quot;, :offset 40, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def parsed-lines (map #(re-find #\&quot;user:\\s?(\\w+)\\s?computer:\\s?(\\w+)\\s?date:\\s?(\\d+\\.\\d+\\.\\d+)\\s?time:(\\d+:\\d+:\\d+,\\d+)\&quot; %) raw-lines))&quot;, :offset 135, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(count (filter #(= nil (second %)) parsed-lines))&quot;, :offset 7, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def regexp #\&quot;user:\\s?(\\w+)\\s?computer:\\s?(\\w+)\\s?date:\\s?(\\d+\\.\\d+\\.\\d+)\\s?time:\\ s?(\\d+:\\d+:\\d+,\\d+)\&quot;)&quot;, :offset 104, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def regexp #\&quot;user:\\s?(\\w+)\\s?computer:\\s?(\\w+)\\s?date:\\s?(\\d+\\.\\d+\\.\\d+)\\s?time:\\s?(\\d+:\\d+:\\d+,\\d+)\&quot;)&quot;, :offset 103, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def regexp #\&quot;user:\\s?(\\w+)\\s?computer:\\s?(\\w+)\\s?date:\\s?(\\d+\\.\\d+\\.\\d+)\\s?time:\\s?+(\\d+:\\d+:\\d+,\\d+)\&quot;)&quot;, :offset 104, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def regexp #\&quot;user:\\s?(\\w+)\\s?computer:\\s?(\\w+)\\s?date:\\s?(\\d+\\.\\d+\\.\\d+)\\s?time:[\\s?]+(\\d+:\\d+:\\d+,\\d+)\&quot;)&quot;, :offset 106, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def regexp #\&quot;user:[\\s?]+(\\S)[\\s?]+\&quot;)&quot;, :offset 37, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def string-to-parse  \&quot;user: AKochetigov computer: RSO-123456 date: 30.10.2018 time:  8:40:41,87\&quot;)&quot;, :offset 98, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def regexp #\&quot;user:\\s*(\\S+)\\s*computer:\\s*(\\S+)\\s*date:\\s*(\\S+)\\s*time:\\s*(\\S+)\&quot;)&quot;, :offset 81, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(re-find regexp string-to-parse)&quot;, :offset 32, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def p-lines\n  (doseq [line raw-lines]\n    (let [[_ user computer date time] (re-find #\&quot;user:\\s*(\\S+)\\s*computer:\\s*(\\S+)\\s*date:\\s*(\\S+)\\s*time:\\s*(\\S+)\&quot; line)]\n      (when (= user nil)\n        (pprint line)))))&quot;, :offset 212, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(def users-to-users-time\n  (group-by :user users-login-time))&quot;, :offset 61, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(first users-login-time)&quot;, :offset 23, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(last users-login-time)&quot;, :offset 5, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(pprint (first users-to-users-time))&quot;, :offset 34, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(pprint (second users-to-users-time))&quot;, :offset 15, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(second (partition-by :name users-login-time))&quot;, :offset 44, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(first (partition-by :name users-login-time))&quot;, :offset 6, :ns &quot;artek-users-tracker.core&quot;} {:command &quot;(filter #(= nil (:name %)) users-login-time)&quot;, :offset 15, :ns &quot;artek-users-tracker.core&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager">
    <configuration name="REPL for artek-users-tracker" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="artek-users-tracker" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for artek-users-tracker" />
      </list>
    </recent_temporary>
  </component>
</project>